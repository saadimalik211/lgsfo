services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lgsfo-postgres-prod
    environment:
      POSTGRES_DB: lgsfo
      POSTGRES_USER: lgsfo_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-lgsfo_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lgsfo_user -d lgsfo"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - lgsfo-network

  # Database Migration Service (DISABLED - Use manual migration)
  # db-migrate:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: lgsfo-migrate
  #   environment:
  #     - DATABASE_URL=postgresql://lgsfo_user:${POSTGRES_PASSWORD:-lgsfo_password}@postgres:5432/lgsfo
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   command: ["npx", "prisma", "migrate", "deploy"]
  #   networks:
  #     - lgsfo-network
  #   restart: "no"

  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lgsfo-app-prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://lgsfo_user:${POSTGRES_PASSWORD:-lgsfo_password}@postgres:5432/lgsfo
      - DB_HOST=postgres
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - lgsfo-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v2.10
    container_name: lgsfo-traefik-prod
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - lgsfo-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lgsfo.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.lgsfo.entrypoints=web"
      - "traefik.http.routers.lgsfo-secure.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.lgsfo-secure.entrypoints=websecure"
      - "traefik.http.routers.lgsfo-secure.tls.certresolver=letsencrypt"
      - "traefik.http.services.lgsfo.loadbalancer.server.port=3000"

volumes:
  postgres_data_prod:
  letsencrypt:

networks:
  lgsfo-network:
    driver: bridge
